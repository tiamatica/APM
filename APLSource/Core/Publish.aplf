 Publish←{
⍝ Publish a package.\\
⍝ 1. Creates a zip file for the package in a Temp folder
⍝ 2. Checks for uniqueness of the given package/version combination.
⍝ 3. Moves the zip file into the Registry
⍝ 4. Updates the Registry index
⍝ `⍵` must be a two-item vector:
⍝ 1. `source` → folder to create package from
⍝ 2. `registry` → registry to publish package to (alias or uri)
⍝ Result:
⍝ 1. `rc`  ← 0 if OK, error otherwise
⍝ 2. `msg` ← empty or additional information
     (source registry)←⍵
     cfg←ReadGlobalConfig''
     uri←cfg{
         0=≢⍺.registries:⍵
         (⍺.registries.alias⍳⊂⍵)⊃⍺.registries.uri,⊂⍵
     }registry
     type←'file://'
     type≢(≢type)↑uri:1 'Only file URI supported'
     path←UriToPath uri

     ⍝ Package
     zipfile←Pack source(GetTempDir)
     cfg←ReadConfig source
     ind←GetRegistryIndex path

     ⍝ validate package and ensure uniqueness in registry
     exists←ind{
         0=≢⍺:0
         (⊂⍵)∊⍺.(group name version)
     }cfg.(group name version)

     exists:'Version conflict, package versions must be unique'Assert 0

     tgt←path,'/packages/',cfg.group,'/',cfg.name,'/'
     _←3 ⎕MKDIR tgt
     _←tgt ⎕NMOVE zipfile
     pcfg←cfg.⎕NS'group' 'name' 'version' 'dependencies'
⍝     pcfg.dependencies←{
⍝         0∊⍴⍵:⍬
⍝         ⍵.(group,'/',name,'/',version)
⍝     }cfg.dependencies
     (ind,pcfg)PutRegistryIndex path
 }
